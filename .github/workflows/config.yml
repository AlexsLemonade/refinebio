name: test-and-deploy

on: push

jobs:
  syntax_test:
    # ubuntu-latest is ubuntu 18.04 which has a really outdated version of shellcheck
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - name: Install build & test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Init terraform in the infrastructure folder for validation
        run: cd infrastructure && TF_VAR_user=ci TF_VAR_stage=dev ./init_terraform.sh

      - name: Init terraform in the AMI folder for validation
        run: cd ami && terraform init

      - name: Run pre-commit hooks on all files
        run: PATH="$PATH:$HOME/.local/bin" pre-commit run --all-files --show-diff-on-failure

  test_affy_agilent:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations affymetrix
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run affymetrix tests
        run: |
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t affymetrix

      - name: Run agilent tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t agilent

  # This runs downloader and NO_OP tests.
  downloader_no_op_tests:
    runs-on: ubuntu-latest
    env:
      # We have issues when downloading the no_op image, so for now let's just not pull it
      # IMAGES: migrations api_local downloaders no_op foreman
      IMAGES: migrations api_local downloaders foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run downloader tests
        run: |
          .github/scripts/filter_tests.sh -t downloaders

      - name: Run NO_OP tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t no_op

  test_api:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations api_local
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run API tests
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          ./api/run_tests.sh
          .github/scripts/upload_test_coverage.sh api

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_common:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations common_tests
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run Common tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          ./common/run_tests.sh
          .github/scripts/upload_test_coverage.sh common

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_foreman:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run Foreman tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          ./foreman/run_tests.sh --exclude-tag=end_to_end
          .github/scripts/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_illumina:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations illumina
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run Illumina tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t illumina
          .github/scripts/upload_test_coverage.sh workers

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_salmon:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations salmon
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run Salmon tests
        run: |
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t salmon
          .github/scripts/upload_test_coverage.sh workers

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_smasher:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations smasher
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run smasher tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t smasher
          .github/scripts/upload_test_coverage.sh workers

      - name: Run janitor tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t janitor
          .github/scripts/upload_test_coverage.sh workers

      - name: Run compendia tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t compendia
          .github/scripts/upload_test_coverage.sh workers

      - name: Run QN tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t qn
          .github/scripts/upload_test_coverage.sh workers

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  test_transcriptome:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations transcriptome
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v3

      - name: Login to Packages Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Run Transcriptome tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t transcriptome
          .github/scripts/upload_test_coverage.sh workers

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  determine_branch:
    # As far as I can tell, this is the only way to use the output of
    # a script in a github conditional.
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.set_branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - id: set_branch
        name: Set the $CI_TAG environment variable
        run: |
          source scripts/common.sh
          echo "branch=$(get_master_or_dev ${GITHUB_REF#refs/tags/})" >> $GITHUB_OUTPUT

  deploy:
    if: startsWith(github.ref, 'refs/tags/v') && ! endsWith(github.ref, '-hotfix')
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      DEPLOY_IP_ADDRESS: ${{ secrets.DEPLOY_IP_ADDRESS }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
      OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENGAGEMENTBOT_WEBHOOK: ${{ secrets.ENGAGEMENTBOT_WEBHOOK }}
      INSTANCE_SSH_KEY: ${{ secrets.INSTANCE_SSH_KEY }}
      CI_USERNAME: ${{ github.actor }}
      STAGING_DATABASE_PASSWORD: ${{ secrets.STAGING_DATABASE_PASSWORD }}
      STAGING_DJANGO_SECRET_KEY: ${{ secrets.STAGING_DJANGO_SECRET_KEY }}
      STAGING_RAVEN_DSN: ${{ secrets.STAGING_RAVEN_DSN }}
      STAGING_RAVEN_DSN_API: ${{ secrets.STAGING_RAVEN_DSN_API }}
      PROD_DATABASE_PASSWORD: ${{ secrets.PROD_DATABASE_PASSWORD }}
      PROD_DJANGO_SECRET_KEY: ${{ secrets.PROD_DJANGO_SECRET_KEY }}
      PROD_RAVEN_DSN: ${{ secrets.PROD_RAVEN_DSN }}
      PROD_RAVEN_DSN_API: ${{ secrets.PROD_RAVEN_DSN_API }}
    needs:
      - determine_branch
      - downloader_no_op_tests
      - syntax_test
      - test_affy_agilent
      - test_api
      - test_common
      - test_foreman
      - test_illumina
      - test_salmon
      - test_smasher
      - test_transcriptome
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set the $MASTER_OR_DEV and $CI_TAG environment variables
        run: |
          source scripts/common.sh
          echo "MASTER_OR_DEV=$(get_master_or_dev ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
          # Remove /ref/tags/ from the beginning of the tag name
          echo "CI_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set staging specific environment variables
        if: ${{needs.determine_branch.outputs.branch == 'dev'}}
        run: |
          echo "DATABASE_PASSWORD=${STAGING_DATABASE_PASSWORD}" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=${STAGING_DJANGO_SECRET_KEY}" >> $GITHUB_ENV
          echo "RAVEN_DSN=${STAGING_RAVEN_DSN}" >> $GITHUB_ENV
          echo "RAVEN_DSN_API=${STAGING_RAVEN_DSN_API}" >> $GITHUB_ENV
          # Staging doesn't notify the engagementbot, so overwrite this to be blank.
          echo "ENGAGEMENTBOT_WEBHOOK=" >> $GITHUB_ENV

      - name: Set prod specific environment variables
        if: ${{needs.determine_branch.outputs.branch == 'master'}}
        run: |
          echo "DATABASE_PASSWORD=${PROD_DATABASE_PASSWORD}" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=${PROD_DJANGO_SECRET_KEY}" >> $GITHUB_ENV
          echo "RAVEN_DSN=${PROD_RAVEN_DSN}" >> $GITHUB_ENV
          echo "RAVEN_DSN_API=${PROD_RAVEN_DSN_API}" >> $GITHUB_ENV
          echo "ENGAGEMENTBOT_WEBHOOK=${ENGAGEMENTBOT_WEBHOOK}" >> $GITHUB_ENV

      - name: Deploy
        run: ./.github/scripts/remote_deploy.sh

      - name: Cleanup deploy
        run: ./.github/scripts/post_deploy_cleanup.sh

  hotfix_deploy:
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-hotfix')
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      DEPLOY_IP_ADDRESS: ${{ secrets.DEPLOY_IP_ADDRESS }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
      OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENGAGEMENTBOT_WEBHOOK: ${{ secrets.ENGAGEMENTBOT_WEBHOOK }}
      INSTANCE_SSH_KEY: ${{ secrets.INSTANCE_SSH_KEY }}
      CI_USERNAME: ${{ github.actor }}
      STAGING_DATABASE_PASSWORD: ${{ secrets.STAGING_DATABASE_PASSWORD }}
      STAGING_DJANGO_SECRET_KEY: ${{ secrets.STAGING_DJANGO_SECRET_KEY }}
      STAGING_RAVEN_DSN: ${{ secrets.STAGING_RAVEN_DSN }}
      STAGING_RAVEN_DSN_API: ${{ secrets.STAGING_RAVEN_DSN_API }}
      PROD_DATABASE_PASSWORD: ${{ secrets.PROD_DATABASE_PASSWORD }}
      PROD_DJANGO_SECRET_KEY: ${{ secrets.PROD_DJANGO_SECRET_KEY }}
      PROD_RAVEN_DSN: ${{ secrets.PROD_RAVEN_DSN }}
      PROD_RAVEN_DSN_API: ${{ secrets.PROD_RAVEN_DSN_API }}
    needs:
      - determine_branch
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set the $MASTER_OR_DEV and $CI_TAG environment variables
        run: |
          source scripts/common.sh
          echo "MASTER_OR_DEV=$(get_master_or_dev ${GITHUB_REF#refs/tags/})" >> $GITHUB_ENV
          # Remove /ref/tags/ from the beginning of the tag name
          echo "CI_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set staging specific environment variables
        if: ${{needs.determine_branch.outputs.branch == 'dev'}}
        run: |
          echo "DATABASE_PASSWORD=${STAGING_DATABASE_PASSWORD}" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=${STAGING_DJANGO_SECRET_KEY}" >> $GITHUB_ENV
          echo "RAVEN_DSN=${STAGING_RAVEN_DSN}" >> $GITHUB_ENV
          echo "RAVEN_DSN_API=${STAGING_RAVEN_DSN_API}" >> $GITHUB_ENV
          # Staging doesn't notify the engagementbot, so overwrite this to be blank.
          echo "ENGAGEMENTBOT_WEBHOOK=" >> $GITHUB_ENV

      - name: Set prod specific environment variables
        if: ${{needs.determine_branch.outputs.branch == 'master'}}
        run: |
          echo "DATABASE_PASSWORD=${PROD_DATABASE_PASSWORD}" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=${PROD_DJANGO_SECRET_KEY}" >> $GITHUB_ENV
          echo "RAVEN_DSN=${PROD_RAVEN_DSN}" >> $GITHUB_ENV
          echo "RAVEN_DSN_API=${PROD_RAVEN_DSN_API}" >> $GITHUB_ENV
          echo "ENGAGEMENTBOT_WEBHOOK=${ENGAGEMENTBOT_WEBHOOK}" >> $GITHUB_ENV

      - name: Deploy
        run: ./.github/scripts/remote_deploy.sh

      - name: Cleanup deploy
        run: ./.github/scripts/post_deploy_cleanup.sh
