name: test-and-deploy

on: push

jobs:
  # This runs foreman, end-to-end, and illumina tests.
  # These are grouped together because in total they take less time than our other tests individually.
  main_tests:
    runs-on: ubuntu-latest
    env:
      # We have issues when downloading the no_op image, so for now let's just not pull it
      # IMAGES: migrations api_local downloaders no_op foreman
      IMAGES: migrations api_local downloaders foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to ghcr.io for cached docker images
        run: echo ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Install Nomad
        run: |
          sudo ./.github/scripts/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      - name: Prepare docker images for end-to-end tests
        run: |
          ./scripts/prepare_image.sh -i no_op -s workers
          docker tag ccdlstaging/dr_no_op localhost:5000/dr_no_op
          docker push localhost:5000/dr_no_op
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders
      # Running these in the same job as the common tests is good
      # because their dockerfiles are very similar so a lot of the
      # build time is saved by only building those layers once.

      - name: Run downloader tests
        run: |
          .github/scripts/filter_tests.sh -t downloaders

      - name: Run NO_OP tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t no_op

      - name: Run foreman tests
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          # The foreman includes the end-to-end tests, but some of these
          # require docker images which are not built in this
          # workflow. Therefore we exclude salmon, affymetrix, and
          # transcriptome and let those end-to-end tests get run in the
          # workflows that include building those images.
          ./foreman/run_tests.sh --exclude-tag=salmon --exclude-tag=transcriptome --exclude-tag=affymetrix
          .github/scripts/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  common_smasher_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations common_tests smasher compendia
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to ghcr.io for cached docker images
        run: echo ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run common tests
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          ./common/run_tests.sh
          .github/scripts/upload_test_coverage.sh common

      - name: Prepare smasher image
        run: ./scripts/prepare_image.sh -i smasher -s workers

      - name: Run smasher tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t smasher

      - name: Run janitor tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t janitor

      - name: Run compendia tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t compendia

      - name: Run QN tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t qn

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  syntax_test:
    # ubuntu-latest is ubuntu 18.04 which has a really outdated version of shellcheck
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5

      - name: Install build & test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Init terraform in the infrastructure folder for validation
        run: cd infrastructure && TF_VAR_user=ci TF_VAR_stage=dev ./init_terraform.sh

      - name: Init terraform in the AMI folder for validation
        run: cd ami && terraform init

      - name: Run pre-commit hooks on all files
        run: PATH="$PATH:$HOME/.local/bin" pre-commit run --all-files --show-diff-on-failure

  # This tests workers tests tagged as 'salmon'
  salmon_and_api_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations salmon api_local downloaders transcriptome foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to ghcr.io for cached docker images
        run: echo ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run API tests
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          ./api/run_tests.sh
          .github/scripts/upload_test_coverage.sh api

      - name: Run salmon tests
        run: .github/scripts/filter_tests.sh -t salmon

      - name: Install Nomad
        run: |
          sudo ./.github/scripts/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      - name: Prepare docker images for end-to-end tests
        run: |
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders
          ./scripts/prepare_image.sh -i transcriptome -s workers
          docker tag ccdlstaging/dr_transcriptome localhost:5000/dr_transcriptome
          docker push localhost:5000/dr_transcriptome
          ./scripts/prepare_image.sh -i salmon -s workers
          docker tag ccdlstaging/dr_salmon localhost:5000/dr_salmon
          docker push localhost:5000/dr_salmon

      - name: Run salmon end-to-end tests
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          ./foreman/run_tests.sh --tag=salmon --tag=transcriptome
          .github/scripts/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  tx_illumina_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations illumina
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to ghcr.io for cached docker images
        run: echo ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run Illumina tests
        run: |
          mkdir -p workers/test_volume
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t illumina

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  affy_agilent_tests:
    runs-on: ubuntu-latest
    env:
      IMAGES: migrations affymetrix downloaders foreman
      DOCKER_BUILDKIT: 1
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    steps:
      - uses: actions/checkout@v2

      - name: Free up space
        run: ./.github/scripts/cleanup_instance.sh

      - name: Login to ghcr.io for cached docker images
        run: echo ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }} | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin

      - name: Pull cached docker images
        run: ./.github/scripts/pull_docker_images.sh

      - name: Start Postgres
        run: ./scripts/run_postgres.sh

      - name: Start Elasticsearch
        run: ./scripts/run_es.sh

      - name: Pause for initialization
        run: sleep 30

      - name: Install the database
        run: ./scripts/install_db_docker.sh

      - name: Update the models
        run: |
          sudo chmod -R a+wr common
          ./scripts/update_models.sh

      - name: Rebuild the Elasticsearch index
        run: ./scripts/rebuild_es_index.sh

      - name: Run affymetrix tests
        run: |
          sudo chmod -R a+rw workers/test_volume
          .github/scripts/filter_tests.sh -t affymetrix

      - name: Run agilent tests
        run: |
          sudo -E chown -R $USER:$USER workers/test_volume
          .github/scripts/filter_tests.sh -t agilent

      - name: Install Nomad
        run: |
          sudo ./.github/scripts/fix_ca_certs.sh
          sudo ./scripts/install_nomad.sh

      - name: Start Nomad
        run: sudo -E ./scripts/run_nomad.sh -e test

      # The foreman includes the end-to-end tests. One of these
      # end-to-end tests is specific to affymetrix, so we run it here
      # since we have the image for it, but we also need the downloaders image.
      - name: Prepare images for the affymetrix end-to-end test
        run: |
          ./scripts/prepare_image.sh -i downloaders -s workers
          docker tag ccdlstaging/dr_downloaders localhost:5000/dr_downloaders
          docker push localhost:5000/dr_downloaders
          # This image was built by the affymetrix workers tests, just
          # gotta retag it so it can go into the local docker repo.
          docker tag ccdlstaging/dr_affymetrix:latest localhost:5000/dr_affymetrix:latest
          docker push localhost:5000/dr_affymetrix

      - name: Run affymetrix end-to-end test
        run: |
          mkdir -p test_volume
          sudo chmod -R a+rw test_volume
          ./foreman/run_tests.sh --tag=affymetrix
          .github/scripts/upload_test_coverage.sh foreman

      - name: Push built docker images
        run: ./.github/scripts/push_docker_images.sh

  deploy:
    if: startsWith(github.ref, 'refs/tags/v') && ! endsWith(github.ref, '-hotfix')
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      DEPLOY_IP_ADDRESS: ${{ secrets.DEPLOY_IP_ADDRESS }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
      OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENGAGEMENT_WEBHOOK: ${{ secrets.ENGAGEMENT_WEBHOOK }}
      CI_USERNAME: ${{ github.actor }}
    needs:
      - main_tests
      - common_smasher_tests
      - syntax_test
      - salmon_and_api_tests
      - tx_illumina_tests
      - affy_agilent_tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set the $CI_TAG environment variable
        run: |
          # Remove /ref/tags/ from the beginning of the tag name
          echo "CI_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install git crypt
        run: ./.github/scripts/install_git_decrypt.sh

      - name: Git decrypt
        run: ./.github/scripts/git_decrypt.sh

      - name: Deploy
        run: ./.github/scripts/remote_deploy.sh

      - name: Notify the slack channel
        run: ./.github/scripts/slackpost.sh robots deploybot

  hotfix_deploy:
    if: startsWith(github.ref, 'refs/tags/v') && endsWith(github.ref, '-hotfix')
    runs-on: ubuntu-latest
    timeout-minutes: 1440
    env:
      DEPLOY_IP_ADDRESS: ${{ secrets.DEPLOY_IP_ADDRESS }}
      DOCKER_ID: ${{ secrets.DOCKER_ID }}
      DOCKER_PASSWD: ${{ secrets.DOCKER_PASSWD }}
      OPENSSL_KEY: ${{ secrets.OPENSSL_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENGAGEMENT_WEBHOOK: ${{ secrets.ENGAGEMENT_WEBHOOK }}
      CI_USERNAME: ${{ github.actor }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set the $CI_TAG environment variable
        run: |
          # Remove /ref/tags/ from the beginning of the tag name
          echo "CI_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Install git crypt
        run: git status && ./.github/scripts/install_git_decrypt.sh

      - name: Git decrypt
        run: ./.github/scripts/git_decrypt.sh

      - name: Deploy
        run: ./.github/scripts/remote_deploy.sh

      - name: Notify the slack channel
        run: ./.github/scripts/slackpost.sh robots deploybot
